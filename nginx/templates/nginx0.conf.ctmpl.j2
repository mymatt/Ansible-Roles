
worker_processes auto; # auto equals the number of cores (one process per core)
# Max Connections = worker_processes x worker_connections
# worker_connections based on ulimit (check ulimit)
events {
  worker_connections 1024;
}

error_log /var/log/nginx/error.log;

  http {

    include mime.types;

    access_log /var/log/nginx/access.log;

    #  Buffer size for POST submissions
    client_body_buffer_size 10K; #specific to nature of requests received
    client_max_body_size 8m; #prevents large request slowing down server

    # Buffer size for Headers
    client_header_buffer_size 1k;

    # Max time to receive client headers/body in ms
    client_body_timeout 12; #time between consecutive read operations to buffer
    client_header_timeout 12;

    # Max time to keep a connection open for in case more data is on the way, reduces the time to open another connection
    # important not to keep connection open to long to avoid using up max connections
    keepalive_timeout 30;

    # Max time for the client accept/receive a response
    send_timeout 10;

    # for sites with large amount of static resources
    # Skip buffering for static files (image sent from disk)
    sendfile on; # slight increase in performance

    # Optimise sendfile packets
    tcp_nopush on; #allows tcp to optimise
    # profile_web_active
    upstream main {
      {% for item in service_web_list %}
        {{ '{{' }}if ne {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ weight_web_list[loop.index0] }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}0{{'"'}} {{ '}}' }}
            {{ '{{' }}range service {{'"'}}{{ item }}{{'"'}}{{ '}}' }}
               server {{ '{{' }}.Address{{ '}}' }}{{ '{{' }}end{{ '}}' }} weight={{ '{{' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ weight_web_list[loop.index0] }}{{'"'}} {{'"'}}1{{'"'}} {{ '}}' }};
          {{ '{{' }}end{{ '}}' }}
      {% endfor %}
    }
    {% set itm = namespace(it = nil) %}
    {% set unt = namespace(un = nil) %}
    {% for item in location_web_list %}
      upstream {{ item }} {
        {% set itm.it = item %}
        {% for unit in name_web_list %}
          {% set unt.un = unit %}
          {% if unt.un == itm.it %}
            {{ '{{' }}range service {{'"'}}{{ service_web_list[loop.index0] }}{{'"'}}{{ '}}' }}
               server {{ '{{' }}.Address{{ '}}' }};
             {{ '{{' }}end{{ '}}' }}
          {% endif %}
        {% endfor %}
      }
    {% endfor %}

    server{

      listen 80; #443 https
      server_name {{ nginx_server_ip }};

      root {{ site_location }};

      location = / {
      {{ '{{' }}if eq {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ start_web }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}0{{'"'}} {{ '}}' }}
        return 200 "Hello from NGINX Proxy\n";
      {{ '{{' }}else if eq {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ start_web }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}1{{'"'}} {{ '}}' }}
        proxy_pass http://main;
      {{ '{{' }}end{{ '}}' }}
      }
      {% for item in location_web_list %}
      location = /{{ item }} {
        proxy_pass http://{{ item }};
      }
      {% endfor %}

    }
  }

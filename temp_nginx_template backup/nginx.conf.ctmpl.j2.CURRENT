
worker_processes auto;

events {
  worker_connections 1024;
}

error_log /var/log/nginx/error.log;

  http {
    include mime.types;

    access_log /var/log/nginx/access.log;

    client_body_buffer_size 10K; #specific to nature of requests received
    client_max_body_size 8m; #prevents large request slowing down server
    # Buffer size for Headers
    client_header_buffer_size 1k;
    # Max time to receive client headers/body in ms
    client_header_timeout 12;
    # Max time to keep a connection open for in case more data is on the way, reduces the time to open another connection
    # important not to keep connection open to long to avoid using up max connections
    keepalive_timeout 30;
    # Max time for the client accept/receive a response
    send_timeout 10;
    # for sites with large amount of static resources
    # Skip buffering for static files (image sent from disk)
    sendfile on; # slight increase in performance
    # Optimise sendfile packets
    tcp_nopush on; #allows tcp to optimise

    {% set inc = namespace(port = 8000) %}
    {% for item in name_web_list %}
      {{ '{{' }}if ne {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ weight_web_list[loop.index0] }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}0{{'"'}} {{ '}}' }}
      {% set inc.port = inc.port + 1 %}
      server {
          listen {{ inc.port }};
          server_name {{ nginx_server_ip }};
          location / {
            proxy_pass http://{{ name_alb }};
            proxy_set_header Host {{ name_web_list[loop.index0] }}.{{ zone_dns }};
          }
        }
      {{ '{{' }}end{{ '}}' }}
    {% endfor %}

    upstream main {
      {% set icr = namespace(port = 8000) %}
      {% for item in name_web_list %}
        {{ '{{' }}if ne {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ weight_web_list[loop.index0] }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}0{{'"'}} {{ '}}' }}
              {% set icr.port = icr.port + 1 %}
              server 127.0.0.1:{{ icr.port }} weight={{ '{{' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ weight_web_list[loop.index0] }}{{'"'}} {{'"'}}1{{'"'}} {{ '}}' }};
          {{ '{{' }}end{{ '}}' }}
      {% endfor %}
    }

    {% for namew in name_web_list %}
      upstream {{ location_web_list[loop.index0] }} {
        server {{ namew }}.{{ zone_dns }};
      }
    {% endfor %}

    server{

      listen 80; #443 https
      server_name {{ nginx_server_ip }};

      root {{ site_location }};

      location = / {
      {{ '{{' }}if eq {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ start_web }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}0{{'"'}} {{ '}}' }}
        return 200 "Hello from NGINX Proxy\n";
      {{ '{{' }}else if eq {{ '(' }}keyOrDefault {{'"'}}{{ kv_path_web }}/{{ start_web }}{{'"'}} {{'"'}}0{{'"'}}{{ ')' }} {{'"'}}1{{'"'}} {{ '}}' }}
        proxy_pass http://main;
        # proxy_set_header X-Forwarded-Host $http_host;
        # proxy_set_header Host $http_host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
      {{ '{{' }}end{{ '}}' }}
      }
      {% for namew in name_web_list %}
      location = /{{ location_web_list[loop.index0] }} {
        proxy_pass http://{{ location_web_list[loop.index0] }};
        proxy_set_header Host {{ namew }}.{{ zone_dns }};
      }
      {% endfor %}

    }
  }
